name: Create a release
on:
  push:
    tags:
      - 'release-v*'
jobs:
  prepare-release:
    name: Prepare release assets
    runs-on: ubuntu-latest
    env:
      SOURCE_TAG: ${{ github.ref }}
    steps:
      - name: Check if the published tag is well formed and setup vars
        run: |
          # Target version must match major.minor.patch and optional -rcX suffix
          # where X must be a number.
          TARGET_VERSION=${SOURCE_TAG#*release-v}
          if ! echo ${TARGET_VERSION} | egrep '^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)*$'; then
            echo "Target version '${TARGET_VERSION}' is malformed, refusing to continue."
            exit 1
          fi

          # Target branch is the release branch we're going to operate on
          # Its name is 'release-<major>.<minor>'
          TARGET_BRANCH="release-${TARGET_VERSION%\.[0-9]*}"

          # The release tag is
          RELEASE_TAG="${SOURCE_TAG#*release-}"

          # Store all variables in release-vars.sh, to be sourced from follow-
          # up steps.
          echo "TARGET_VERSION=${TARGET_VERSION}" > ~/release-vars.sh
          echo "TARGET_BRANCH=${TARGET_BRANCH}" >> ~/release-vars.sh
          echo "RELEASE_TAG=${RELEASE_TAG}" >> ~/release-vars.sh
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Setup Git author information
        run: |
          git config --global user.email "jann@mistrust.net"
          git config --global user.name "jannfis"
      - name: Checkout corresponding release branch
        run: |
          set -u
          . ~/release-vars.sh
          echo "Switching to release branch '${TARGET_BRANCH}'"
          git checkout ${TARGET_BRANCH}
      - name: Create VERSION information
        run: |
          set -u
          . ~/release-vars.sh
          echo "Bumping version from $(cat VERSION) to ${TARGET_VERSION}"
          echo "${TARGET_VERSION}" > VERSION
          git commit -m "Bump version to ${TARGET_VERSION}" VERSION
      - name: Generate new set of manifests
        run: |
          set -u
          . ~/release-vars.sh
          make install-codegen-tools-local
          helm2 init --client-only
          make manifests-local VERSION=${TARGET_VERSION}
          git diff
          git commit manifests/ -m "Bump version to ${TARGET_VERSION}"
      - name: Push changes to release branch
        run: |
          git push
      - name: Create release tag
        run: |
          set -u
          . ~/release-vars.sh
          echo "Creating release ${RELEASE_TAG}"
          git tag -a -m "Release ${RELEASE_TAG}" ${RELEASE_TAG}
          git push origin ${RELEASE_TAG}
